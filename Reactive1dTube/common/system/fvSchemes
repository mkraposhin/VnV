/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2212                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default     backward;
}

gradSchemes
{
    default         Gauss linear;
}

defaultAdvScheme    Minmod; //测试发现计算效果 Minmod > vanAlbada > vanLeer > MUSCL
defaultAdvSchemeV   MinmodV;

divSchemes
{
    default         none;

    //momentum equation
    div(phi_nei,U)  Gauss $defaultAdvSchemeV;
    div(phi_own,U)  Gauss $defaultAdvSchemeV;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

    //energy equation
    div(phi_nei,h)  Gauss $defaultAdvScheme;
    div(phi_own,h)  Gauss $defaultAdvScheme;
    div(phi_nei,K)  Gauss $defaultAdvScheme;
    div(phi_own,K)  Gauss $defaultAdvScheme;
    div(alphaEff*hi,grad(Yi)) Gauss linear;
    div(rhoi*Uri,hi)    Gauss linear;

    //continuity equation
    div(phid_nei,p) Gauss $defaultAdvScheme;
    div(phid_own,p) Gauss $defaultAdvScheme;
    
    //mixture component transport equation
    div(phi_nei,Yi) Gauss $defaultAdvScheme;
    div(phi_own,Yi) Gauss $defaultAdvScheme;

    //div(Phi_Inlet,smokeFoil)    Gauss $defaultAdvScheme;//upwind;//linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         none;
    
    interpolate(U) linear;
    interpolate((rho*U)) linear;
    interpolate(((rho*nut)+thermo:mu)) linear;
    
    reconstruct(rho)    $defaultAdvScheme;
    reconstruct(psi)    $defaultAdvScheme;
    reconstruct(p)      $defaultAdvScheme;
    reconstruct(U)      $defaultAdvSchemeV;
    reconstruct(rho*U)  $defaultAdvSchemeV;
    reconstruct(Dp)     $defaultAdvScheme;
    reconstruct(W)      $defaultAdvScheme;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default	        no;
    p;
    h;
    Yi;
    
    //must add all reaction species in your selected mechnism
    H2; O2; H; O; OH; HO2; H2O2; H2O; AR;
}

// ************************************************************************* //
